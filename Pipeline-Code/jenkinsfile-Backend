pipeline {
    agent any
    
    tools {
        jdk 'jdk'
        nodejs 'nodejs'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        GCP_DEFAULT_REGION = 'us-central1'
        IMAGE_NAME = 'backend'
        GCP_GCR_REPO_NAME = 'backend-repo' 
        PROJECT_ID = credentials('PROJECT_ID')
        GCR_URL = "${GCP_DEFAULT_REGION}-docker.pkg.dev/${PROJECT_ID}/${GCP_GCR_REPO_NAME}/${IMAGE_NAME}"
        GIT_REPO_URL = 'https://github.com/anish-001/GKE-devops-project.git'
    }
    
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        
        stage('Checkout from Git') {
            steps {
                git url: "${GIT_REPO_URL}", branch: 'main'
            }
        }
        
        /*
        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/backend') {
                    withSonarQubeEnv('sonar') {
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=backend \
                            -Dsonar.projectKey=backend
                        '''
                    }
                }
            }
        }
        
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
       
        
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/backend') {
                    withCredentials([string(credentialsId: 'nvd-api', variable: 'NVD_API_KEY')]) {
                        dependencyCheck additionalArguments: '--nvdApiKey ${NVD_API_KEY}', odcInstallation: 'DP-Check'
                    }
                }
            }
        }  */
        
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        
        stage('Docker Image Build') {
            steps {
                script {
                    dir('Application-Code/backend') {
                        docker.build("${GCR_URL}:${BUILD_NUMBER}")
                    }
                }
            }
        }
        
        stage('Push to GCR') {
            steps {
                script {
                    docker.withRegistry("https://${GCP_DEFAULT_REGION}-docker.pkg.dev", 'gcr') {
                        docker.image("${GCR_URL}:${BUILD_NUMBER}").push()
                    }
                }
            }
        }
        
        stage('Trivy Image Scan') {
            steps {
                script {
                    sh "trivy image ${GCR_URL}:${BUILD_NUMBER} > trivyimage.txt"
                }
            }
        }
        
        stage('Checkout from Git to edit') {
            steps {
                git url: "${GIT_REPO_URL}", branch: 'main'
            }
        }
        
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = 'GKE-devops-project'
                GIT_USER_NAME = 'anish-001'
            }
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "anish.vivaan@gmail.com"
                            git config user.name "anish-001"
                            
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo "Build Number: $BUILD_NUMBER"
                            
                            imageTag=$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml)
                            echo "Current Image Tag: $imageTag"
                            
                            sed -i "s/${IMAGE_NAME}:${imageTag}/${IMAGE_NAME}:${BUILD_NUMBER}/" deployment.yaml
                            
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                            git remote set-url origin https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
                            git push origin HEAD:main
                        '''
                    }
                }
            }
        }
    }
}